/*
 * Copyright (c) 2017.  Jahir Fiquitiva
 *
 * Licensed under the CreativeCommons Attribution-ShareAlike
 * 4.0 International License. You may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *    http://creativecommons.org/licenses/by-sa/4.0/legalcode
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Special thanks to the project contributors and collaborators
 * 	https://github.com/jahirfiquitiva/IconShowcase#special-thanks
 */

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

android {
    compileSdkVersion Integer.parseInt(project.TARGET_SDK)
    buildToolsVersion project.BUILD_TOOLS

    lintOptions {
        abortOnError false
        checkReleaseBuilds false
        disable 'MissingTranslation'
    }

    defaultConfig {
        minSdkVersion Integer.parseInt(project.MIN_SDK)
        targetSdkVersion Integer.parseInt(project.TARGET_SDK)
        versionCode Integer.parseInt(project.VERSION_CODE)
        versionName project.VERSION_NAME
        vectorDrawables.useSupportLibrary = true
        consumerProguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            res.srcDirs = [
                    'src/main/res',
                    'src/main/res/drawable',
                    'src/main/res/drawable/app',
                    'src/main/res/drawable/clock_widget',
                    'src/main/res/drawable/launchers_icons',
                    'src/main/res/drawable/splash_screens',
                    'src/main/res/drawable/ui',
                    'src/main/res/layout',
                    'src/main/res/layout/activities',
                    'src/main/res/layout/extras',
                    'src/main/res/layout/items',
                    'src/main/res/layout/sections',
                    'src/main/res/layout/widgets',
                    'src/main/res/values',
                    'src/main/res/values/icon_pack',
                    'src/main/res/values/is_configuration',
                    'src/main/res/values/private-values',
                    'src/main/res/values/translations'
            ]
        }
    }

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // Android Support Libraries
    compile "com.android.support:support-v13:${ANDROID_SUPPORT}"
    compile "com.android.support:appcompat-v7:${ANDROID_SUPPORT}"
    compile "com.android.support:recyclerview-v7:${ANDROID_SUPPORT}"
    compile "com.android.support:cardview-v7:${ANDROID_SUPPORT}"
    compile "com.android.support:gridlayout-v7:${ANDROID_SUPPORT}"
    compile "com.android.support:palette-v7:${ANDROID_SUPPORT}"
    compile "com.android.support:design:${ANDROID_SUPPORT}"
    compile "com.android.support:customtabs:${ANDROID_SUPPORT}"

    // Themes Manager
    compile "com.afollestad:aesthetic:${AESTHETIC}"

    // Material Dialogs
    compile "com.afollestad.material-dialogs:core:${MATERIAL_DIALOGS}"

    // Material Drawer
    compile("com.mikepenz:materialdrawer:${MATERIAL_DRAWER}@aar") {
        transitive = true
    }

    // OkHttp
    compile "com.squareup.okhttp3:okhttp:${OKHTTP}"

    // Glide Image Loading
    compile "com.github.bumptech.glide:glide:${GLIDE}"

    // RecyclerView Fast Scroller
    compile "com.github.plusCubed:recycler-fast-scroll:${RECYCLERVIEW_FAST_SCROLL}"

    // Icon Requests Tool
    compile "com.github.AllanWang:Icon-Request-Tool:${ICON_REQUEST_TOOL}"

    //Circular ImageView
    compile "com.github.hdodenhof:CircleImageView:${CIRCLE_IMAGEVIEW}"

    // In-App Purchases
    compile "com.anjlab.android.iab.v3:library:${IAP}"

    // Muzei API
    //noinspection GradleDynamicVersion
    compile "com.google.android.apps.muzei:muzei-api:${MUZEI_API}"

    // License Checker
    compile "com.github.javiersantos:PiracyChecker:${CHECKER}"
}

// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

// uncomment to build a jar file in addition to the default aar file
//android.libraryVariants.all { variant ->
//    def name = variant.buildType.name
//    def task = project.tasks.create "jar${name.capitalize()}", Jar
//    task.dependsOn variant.javaCompile
//    task.from variant.javaCompile.destinationDir
//    artifacts.add('archives', task);
//}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xbootclasspath/a:" + System.properties.get("java.home") + "/lib/rt.jar"
    }
}